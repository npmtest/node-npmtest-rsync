{"/home/travis/build/npmtest/node-npmtest-rsync/test.js":"/* istanbul instrument in package npmtest_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsync/lib.npmtest_rsync.js":"/* istanbul instrument in package npmtest_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rsync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rsync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rsync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rsync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rsync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rsync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rsync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rsync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rsync.__dirname + '/lib.npmtest_rsync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsync/node_modules/rsync/rsync.js":"var spawn = require('child_process').spawn;\nvar path = require('path');\n\n/**\n * Rsync is a wrapper class to configure and execute an `rsync` command\n * in a fluent and convenient way.\n *\n * A new command can be set up by creating a new `Rsync` instance of\n * obtaining one through the `build` method.\n *\n * @example\n *   // using the constructor\n *   var rsync = new Rsync()\n *       .source('/path/to/source')\n *       .destination('myserver:destination/');\n *\n *   // using the build method with options\n *   var rsync = Rsync.build({\n *     source:      '/path/to/source',\n *     destination: 'myserver:destination/'\n *   });\n *\n * Executing the command can be done using the `execute` method. The command\n * is executed as a child process and three callbacks can be registered. See\n * the `execute` method for more details.\n *\n * @example\n *   rsync.execute(function(error, code, cmd) {\n *     // function called when the child process is finished\n *   }, function(stdoutChunk) {\n *     // function called when a chunk of text is received on stdout\n *   }, function stderrChunk) {\n *     // function called when a chunk of text is received on stderr\n *   });\n *\n * @author      Mattijs Hoitink <mattijs@monkeyandmachine.com>\n * @copyright   Copyright (c) 2013, Mattijs Hoitink <mattijs@monkeyandmachine.com>\n * @license     The MIT License\n *\n * @constructor\n * @param {Object} config Configuration settings for the Rsync wrapper.\n */\nfunction Rsync(config) {\n    if (!(this instanceof Rsync)) {\n        return new Rsync(config);\n    }\n\n    // Parse config\n    config = config || {};\n    if (typeof(config) !== 'object') {\n        throw new Error('Rsync config must be an Object');\n    }\n\n    // executable\n    this._executable = hasOP(config, 'executable') ? config.executable : 'rsync';\n\n    // shell\n    this._executableShell = hasOP(config, 'executableShell') ? config.executableShell : '/bin/sh';\n\n    // source(s) and destination\n    this._sources     = [];\n    this._destination = '';\n\n    // ordered list of file patterns to include/exclude\n    this._patterns = [];\n\n    // options\n    this._options = {};\n\n    // output callbacks\n    this._outputHandlers = {\n        stdout: null,\n        stderr: null\n    };\n\n    this._cwd = process.cwd();\n\n    // Allow child_process.spawn env overriding\n    this._env = process.env;\n\n    // Debug parameter\n    this._debug = hasOP(config, 'debug') ? config.debug : false;\n}\n\n/**\n * Build a new Rsync command from an options Object.\n * @param {Object} options\n * @return {Rsync}\n */\nRsync.build = function(options) {\n    var command = new Rsync();\n\n    // Process all options\n    for (var key in options) {\n        if (hasOP(options, key)) {\n            var value = options[key];\n\n            // Only allow calling methods on the Rsync command\n            if (typeof(command[key]) === 'function') {\n                command[key](value);\n            }\n        }\n    }\n\n    return command;\n};\n\n/**\n * Set an option.\n * @param {String} option\n * @param mixed value\n * @return Rsync\n */\nRsync.prototype.set = function(option, value) {\n    option = stripLeadingDashes(option);\n    if (option && option.length > 0) {\n        this._options[option] = value || null;\n    }\n    return this;\n};\n\n/**\n * Unset an option.\n * @param {String} option\n * @return Rsync\n */\nRsync.prototype.unset = function(option) {\n    option = stripLeadingDashes(option);\n\n    if (option && Object.keys(this._options).indexOf(option) >= 0) {\n        delete this._options[option];\n    }\n    return this;\n};\n\n/**\n * Set or unset one or more flags. A flag is a single letter option without a value.\n *\n * Flags can be presented as a single String, an Array containing Strings or an Object\n * with the flags as keys.\n *\n * When flags are presented as a String or Array the set or unset method will be determined\n * by the second parameter.\n * When the flags are presented as an Object the set or unset method will be determined by\n * the value corresponding to each flag key.\n *\n * @param {String|Array|Object} flags\n * @param {Boolean} set\n * @return Rsync\n */\nRsync.prototype.flags = function(flags, set) {\n    // Do some argument handling\n    if (!arguments.length) {\n        return this;\n    }\n    else if (arguments.length === 1) {\n        set = true;\n    }\n    else {\n        // There are more than 1 arguments, assume flags are presented as strings\n        flags = Array.prototype.slice.call(arguments);\n\n        // Check if the last argument is a boolean\n        if (typeof(flags[flags.length - 1]) === 'boolean') {\n            set = flags.pop();\n        }\n        else {\n            set = true;\n        }\n\n        // Join the remainder of the arguments to treat them as flags\n        flags = flags.join('');\n    }\n\n    // Split multiple flags\n    if (typeof(flags) === 'string') {\n        flags = stripLeadingDashes(flags).split('');\n    }\n\n    // Turn array into an object\n    if (isArray(flags)) {\n        var obj = {};\n        flags.forEach(function(f) {\n            obj[f] = set;\n        });\n        flags = obj;\n    }\n\n    // set/unset each flag\n    for (var key in flags) {\n        if (hasOP(flags, key)) {\n            var method = (flags[key]) ? 'set' : 'unset';\n            this[method](stripLeadingDashes(key));\n        }\n    }\n\n    return this;\n};\n\n/**\n * Check if an option is set.\n * @param {String} option\n * @return {Boolean}\n */\nRsync.prototype.isSet = function(option) {\n    option = stripLeadingDashes(option);\n    return Object.keys(this._options).indexOf(option) >= 0;\n};\n\n/**\n * Get an option by name.\n * @param {String} name\n * @return mixed\n */\nRsync.prototype.option = function(name) {\n    name = stripLeadingDashes(name);\n    return this._options[name];\n};\n\n/**\n * Register a list of file patterns to include/exclude in the transfer. Patterns can be\n * registered as an array of Strings or Objects.\n *\n * When registering a pattern as a String it must be prefixed with a `+` or `-` sign to\n * signal include or exclude for the pattern. The sign will be stripped of and the\n * pattern will be added to the ordered pattern list.\n *\n * When registering the pattern as an Object it must contain the `action` and\n * `pattern` keys where `action` contains the `+` or `-` sign and the `pattern`\n * key contains the file pattern, without the `+` or `-` sign.\n *\n * @example\n *   // on an existing rsync object\n *   rsync.patterns(['-docs', { action: '+', pattern: '/subdir/*.py' }]);\n *\n *   // using Rsync.build for a new rsync object\n *   rsync = Rsync.build({\n *     ...\n *     patterns: [ '-docs', { action: '+', pattern: '/subdir/*.py' }]\n *     ...\n *   })\n *\n * @param {Array} patterns\n * @return Rsync\n */\nRsync.prototype.patterns = function(patterns) {\n    if (arguments.length > 1) {\n        patterns = Array.prototype.slice.call(arguments, 0);\n    }\n    if (!isArray(patterns)) {\n        patterns = [ patterns ];\n    }\n\n    patterns.forEach(function(pattern) {\n        var action = '?';\n        if (typeof(pattern) === 'string') {\n            action  = pattern.charAt(0);\n            pattern = pattern.substring(1);\n        }\n        else if (\n            typeof(pattern) === 'object' &&\n            hasOP(pattern, 'action') &&\n            hasOP(pattern, 'pattern')\n        ) {\n            action  = pattern.action;\n            pattern = pattern.pattern;\n        }\n\n        // Check if the pattern is an include or exclude\n        if (action === '-') {\n            this.exclude(pattern);\n        }\n        else if (action === '+') {\n            this.include(pattern);\n        }\n        else {\n            throw new Error('Invalid pattern: ' + pattern);\n        }\n    }, this);\n\n    return this;\n};\n\n/**\n * Exclude a file pattern from transfer. The pattern will be appended to the ordered list\n * of patterns for the rsync command.\n *\n * @param {String|Array} patterns\n * @return Rsync\n */\nRsync.prototype.exclude = function(patterns) {\n    if (arguments.length > 1) {\n        patterns = Array.prototype.slice.call(arguments, 0);\n    }\n    if (!isArray(patterns)) {\n        patterns = [ patterns ];\n    }\n\n    patterns.forEach(function(pattern) {\n        this._patterns.push({ action:  '-', pattern: pattern });\n    }, this);\n\n    return this;\n};\n\n/**\n * Include a file pattern for transfer. The pattern will be appended to the ordered list\n * of patterns for the rsync command.\n *\n * @param {String|Array} patterns\n * @return Rsync\n */\nRsync.prototype.include = function(patterns) {\n    if (arguments.length > 1) {\n        patterns = Array.prototype.slice.call(arguments, 0);\n    }\n    if (!isArray(patterns)) {\n        patterns = [ patterns ];\n    }\n\n    patterns.forEach(function(pattern) {\n        this._patterns.push({ action:  '+', pattern: pattern });\n    }, this);\n\n    return this;\n};\n\n/**\n * Get the command that is going to be executed.\n * @return {String}\n */\nRsync.prototype.command = function() {\n    return this.executable() + ' ' + this.args().join(' ');\n};\n\n/**\n * String representation of the Rsync command. This is the command that is\n * going to be executed when calling Rsync::execute.\n * @return {String}\n */\nRsync.prototype.toString = Rsync.prototype.command;\n\n/**\n * Get the arguments for the rsync command.\n * @return {Array}\n */\nRsync.prototype.args = function() {\n    // Gathered arguments\n    var args = [];\n\n    // Add options. Short options (one letter) without values are gathered together.\n    // Long options have a value but can also be a single letter.\n    var short = [];\n    var long  = [];\n\n    // Split long and short options\n    for (var key in this._options) {\n        if (hasOP(this._options, key)) {\n            var value = this._options[key];\n            var noval = (value === null || value === undefined);\n\n            // Check for short option (single letter without value)\n            if (key.length === 1 && noval) {\n                short.push(key);\n            }\n            else {\n                if (isArray(value)) {\n                    value.forEach(function (val) {\n                        long.push(buildOption(key, val, escapeShellArg));\n                    });\n                }\n                else {\n                    long.push(buildOption(key, value, escapeShellArg));\n                }\n            }\n\n        }\n    }\n\n    // Add combined short options if any are present\n    if (short.length > 0) {\n        args.push('-' + short.join(''));\n    }\n\n    // Add long options if any are present\n    if (long.length > 0) {\n        args = args.concat(long);\n    }\n\n    // Add includes/excludes in order\n    this._patterns.forEach(function(def) {\n        if (def.action === '-') {\n            args.push(buildOption('exclude', def.pattern, escapeFileArg));\n        }\n        else if (def.action === '+') {\n            args.push(buildOption('include', def.pattern, escapeFileArg));\n        }\n        else {\n            debug(this, 'Unknown pattern action ' + def.action);\n        }\n    });\n\n    // Add sources\n    if (this.source().length > 0) {\n        args = args.concat(this.source().map(escapeFileArg));\n    }\n\n    // Add destination\n    if (this.destination()) {\n        args.push(escapeFileArg(this.destination()));\n    }\n\n    return args;\n};\n\n/**\n * Get and set rsync process cwd directory.\n *\n * @param  {string} cwd= Directory path relative to current process directory.\n * @return {string} Return current _cwd.\n */\nRsync.prototype.cwd = function(cwd) {\n    if (arguments.length > 0) {\n        if (typeof cwd !== 'string') {\n            throw new Error('Directory should be a string');\n        }\n\n        this._cwd = path.resolve(cwd);\n    }\n\n    return this._cwd;\n};\n\n/**\n * Get and set rsync process environment variables\n *\n * @param  {string} env= Environment variables\n * @return {string} Return current _env.\n */\nRsync.prototype.env = function(env) {\n    if (arguments.length > 0) {\n        if (typeof env !== 'object') {\n            throw new Error('Environment should be an object');\n        }\n\n        this._env = env;\n    }\n\n    return this._env;\n};\n\n/**\n * Register an output handlers for the commands stdout and stderr streams.\n * These functions will be called once data is streamed on one of the output buffers\n * when the command is executed using `execute`.\n *\n * Only one callback function can be registered for each output stream. Previously\n * registered callbacks will be overridden.\n *\n * @param {Function} stdout     Callback Function for stdout data\n * @param {Function} stderr     Callback Function for stderr data\n * @return Rsync\n */\nRsync.prototype.output = function(stdout, stderr) {\n    // Check for single argument so the method can be used with Rsync.build\n    if (arguments.length === 1 && Array.isArray(stdout)) {\n        stderr = stdout[1];\n        stdout = stdout[0];\n    }\n\n    if (typeof(stdout) === 'function') {\n        this._outputHandlers.stdout = stdout;\n    }\n    if (typeof(stderr) === 'function') {\n        this._outputHandlers.stderr = stdout;\n    }\n\n    return this;\n};\n\n/**\n * Execute the rsync command.\n *\n * The callback function is called with an Error object (or null when there was none),\n * the exit code from the executed command and the executed command as a String.\n *\n * When stdoutHandler and stderrHandler functions are provided they will be used to stream\n * data from stdout and stderr directly without buffering.\n *\n * @param {Function} callback       Called when rsync finishes (optional)\n * @param {Function} stdoutHandler  Called on each chunk received from stdout (optional)\n * @param {Function} stderrHandler  Called on each chunk received from stderr (optional)\n */\nRsync.prototype.execute = function(callback, stdoutHandler, stderrHandler) {\n    // Register output handlers\n    this.output(stdoutHandler, stderrHandler);\n\n    // Execute the command as a child process\n    // see https://github.com/joyent/node/blob/937e2e351b2450cf1e9c4d8b3e1a4e2a2def58bb/lib/child_process.js#L589\n    var cmdProc;\n    if ('win32' === process.platform) {\n        cmdProc = spawn('cmd.exe', ['/s', '/c', '\"' + this.command() + '\"'],\n                        { stdio: 'pipe', windowsVerbatimArguments: true, cwd: this._cwd, env: this._env });\n    }\n    else {\n        cmdProc = spawn(this._executableShell, ['-c', this.command()],\n                        { stdio: 'pipe', cwd: this._cwd, env: this._env });\n    }\n\n    // Capture stdout and stderr if there are output handlers configured\n    if (typeof(this._outputHandlers.stdout) === 'function') {\n        cmdProc.stdout.on('data', this._outputHandlers.stdout);\n    }\n    if (typeof(this._outputHandlers.stderr) === 'function') {\n        cmdProc.stderr.on('data', this._outputHandlers.stderr);\n    }\n\n    // Wait for the command to finish\n    cmdProc.on('close', function(code) {\n        var error = null;\n\n        // Check rsyncs error code\n        // @see http://bluebones.net/2007/06/rsync-exit-codes/\n        if (code !== 0) {\n            error = new Error('rsync exited with code ' + code);\n        }\n\n        // Check for callback\n        if (typeof(callback) === 'function') {\n            callback(error, code, this.command());\n        }\n    }.bind(this));\n\n    // Return the child process object so it can be cleaned up\n    // if the process exits\n    return(cmdProc);\n};\n\n/**\n * Get or set the debug property.\n *\n * The property is set to the boolean provided so unsetting the debug\n * property has to be done by passing false to this method.\n *\n * @function\n * @name debug\n * @memberOf Rsync.prototype\n * @param {Boolean} debug the value of the debug property (optional)\n * @return {Rsync|Boolean}\n */\ncreateValueAccessor('debug');\n\n/**\n * Get or set the executable to use for the rsync process.\n *\n * When setting the executable path the Rsync instance is returned for\n * the fluent interface. Otherwise the configured executable path\n * is returned.\n *\n * @function\n * @name executable\n * @memberOf Rsync.prototype\n * @param {String} executable path to the executable (optional)\n * @return {Rsync|String}\n */\ncreateValueAccessor('executable');\n\n/**\n * Get or set the shell to use on non-Windows (Unix or Mac OS X) systems.\n *\n * When setting the shell the Rsync instance is returned for the\n * fluent interface. Otherwise the configured shell is returned.\n *\n * @function\n * @name executableShell\n * @memberOf Rsync.prototype\n * @param {String} shell to use on non-Windows systems (optional)\n * @return {Rsync|String}\n */\ncreateValueAccessor('executableShell');\n\n/**\n * Get or set the destination for the transfer.\n *\n * When setting the destination the Rsync instance is returned for\n * the fluent interface. Otherwise the configured destination path\n * is returned.\n *\n * @function\n * @name destination\n * @memberOf Rsync.prototype\n * @param {String} destination the destination (optional)\n * @return {Rsync|String}\n */\ncreateValueAccessor('destination');\n\n/**\n * Add one or more sources for the command or get the list of configured\n * sources.\n *\n * The sources are appended to the list of known sources if they were not\n * included yet and the Rsync instance is returned for the fluent\n * interface. Otherwise the configured list of source is returned.\n *\n * @function\n * @name source\n * @memberOf Rsync.prototype\n * @param {String|Array} sources the source or list of sources to configure (optional)\n * @return {Rsync|Array}\n */\ncreateListAccessor('source', '_sources');\n\n/**\n * Set the shell to use when logging in on a remote server.\n *\n * This is the same as setting the `rsh` option.\n *\n * @function\n * @name shell\n * @memberOf Rsync.prototype\n * @param {String} shell the shell option to use\n * @return {Rsync}\n */\nexposeLongOption('rsh', 'shell');\n\n/**\n * Add a chmod instruction to the command.\n *\n * @function\n * @name chmod\n * @memberOf Rsync.prototype\n * @param {String|Array}\n * @return {Rsync|Array}\n */\nexposeMultiOption('chmod', 'chmod');\n\n/**\n * Set the delete flag.\n *\n * This is the same as setting the `--delete` commandline flag.\n *\n * @function\n * @name delete\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('delete');\n\n/**\n * Set the progress flag.\n *\n * This is the same as setting the `--progress` commandline flag.\n *\n * @function\n * @name progress\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('progress');\n\n/**\n * Set the archive flag.\n *\n * @function\n * @name archive\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('a', 'archive');\n\n/**\n * Set the compress flag.\n *\n * @function\n * @name compress\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('z', 'compress');\n\n/**\n * Set the recursive flag.\n *\n * @function\n * @name recursive\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('r', 'recursive');\n\n/**\n * Set the update flag.\n *\n * @function\n * @name update\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('u', 'update');\n\n/**\n * Set the quiet flag.\n *\n * @function\n * @name quiet\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('q', 'quiet');\n\n/**\n * Set the dirs flag.\n *\n * @function\n * @name dirs\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('d', 'dirs');\n\n/**\n * Set the links flag.\n *\n * @function\n * @name links\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('l', 'links');\n\n/**\n * Set the dry flag.\n *\n * @function\n * @name dry\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('n', 'dry');\n\n/**\n * Set the hard links flag preserving hard links for the files transmitted.\n *\n * @function\n * @name hardLinks\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('H', 'hardLinks');\n\n/**\n * Set the perms flag.\n *\n * @function\n * @name perms\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('p', 'perms');\n\n/**\n * Set the executability flag to preserve executability for the files\n * transmitted.\n *\n * @function\n * @name executability\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('E', 'executability');\n\n/**\n * Set the group flag to preserve the group permissions of the files\n * transmitted.\n *\n * @function\n * @name group\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('g', 'group');\n\n/**\n * Set the owner flag to preserve the owner of the files transmitted.\n *\n * @function\n * @name owner\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('o', 'owner');\n\n/**\n * Set the acls flag to preserve the ACLs for the files transmitted.\n *\n * @function\n * @name acls\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('A', 'acls');\n\n/**\n * Set the xattrs flag to preserve the extended attributes for the files\n * transmitted.\n *\n * @function\n * @name xattrs\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('X', 'xattrs');\n\n/**\n * Set the devices flag to preserve device files in the transfer.\n *\n * @function\n * @name devices\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('devices');\n\n/**\n * Set the specials flag to preserve special files.\n *\n * @function\n * @name specials\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('specials');\n\n/**\n * Set the times flag to preserve times for the files in the transfer.\n *\n * @function\n * @name times\n * @memberOf Rsync.prototype\n * @return {Rsync}\n */\nexposeShortOption('t', 'times');\n\n// our awesome export product\nmodule.exports = Rsync;\n\n/* **** */\n\n/**\n * Create a chainable function on the Rsync prototype for getting and setting an\n * internal value.\n * @param {String} name\n * @param {String} internal\n */\nfunction createValueAccessor(name, internal) {\n    var container = internal || '_' + name;\n\n    Rsync.prototype[name] = function(value) {\n        if (!arguments.length) return this[container];\n        this[container] = value;\n        return this;\n    };\n}\n\n/**\n * @param {String} name\n * @param {String} internal\n */\nfunction createListAccessor(name, internal) {\n    var container = internal || '_' + name;\n\n    Rsync.prototype[name] = function(value) {\n        if (!arguments.length) return this[container];\n\n        if (isArray(value)) {\n            value.forEach(this[name], this);\n        }\n        else if (typeof(value) !== 'string') {\n            throw new Error('Value for Rsync::' + name + ' must be a String');\n        }\n        else if (this[container].indexOf(value) < 0) {\n            this[container].push(value);\n        }\n\n        return this;\n    };\n}\n\n/**\n * Create a shorthand method on the Rsync prototype for setting and unsetting a simple option.\n * @param {String} option\n * @param {String} name\n */\nfunction exposeShortOption(option, name) {\n    name = name || option;\n\n    Rsync.prototype[name] = function(set) {\n        // When no arguments are passed in assume the option\n        // needs to be set\n        if (!arguments.length) set = true;\n\n        var method = (set) ? 'set' : 'unset';\n        return this[method](option);\n    };\n}\n\n/**\n * Create a function for an option that can be set multiple time. The option\n * will accumulate all values.\n *\n * @param {String} option\n * @param {[String]} name\n */\nfunction exposeMultiOption(option, name) {\n    name = name || option;\n\n    Rsync.prototype[name] = function(value) {\n        // When not arguments are passed in assume the options\n        // current value is requested\n        if (!arguments.length) return this.option(option);\n\n        if (!value) {\n            // Unset the option on falsy\n            this.unset(option);\n        }\n        else if (isArray(value)) {\n            // Call this method for each array value\n            value.forEach(this[name], this);\n        }\n        else {\n            // Add the value\n            var current = this.option(option);\n            if (!current) {\n                value = [ value ];\n            }\n            else if (!isArray(current)) {\n              value = [ current, value ];\n            }\n            else {\n                value = current.concat(value);\n            }\n\n            this.set(option, value);\n        }\n\n        return this;\n    };\n}\n\n/**\n * Expose an rsync long option on the Rsync prototype.\n * @param {String} option   The option to expose\n * @param {String} name     An optional alternative name for the option.\n */\nfunction exposeLongOption(option, name) {\n    name = name || option;\n\n    Rsync.prototype[name] = function(value) {\n        // When not arguments are passed in assume the options\n        // current value is requested\n        if (!arguments.length) return this.option(option);\n\n        var method = (value) ? 'set' : 'unset';\n        return this[method](option, value);\n    };\n}\n\n/**\n * Build an option for use in a shell command.\n *\n * @param {String} name\n * @param {String} value\n * @param {Function|boolean} escapeArg\n * @return {String}\n */\nfunction buildOption(name, value, escapeArg) {\n    if (typeof escapeArg === 'boolean') {\n        escapeArg = (!escapeArg) ? noop : null;\n    }\n\n    if (typeof escapeArg !== 'function') {\n        escapeArg = escapeShellArg;\n    }\n\n    // Detect single option key\n    var single = (name.length === 1) ? true : false;\n\n    // Decide on prefix and value glue\n    var prefix = (single) ? '-' : '--';\n    var glue   = (single) ? ' ' : '=';\n\n    // Build the option\n    var option = prefix + name;\n    if (arguments.length > 1 && value) {\n        value   = escapeArg(String(value));\n        option += glue + value;\n    }\n\n    return option;\n}\n\n/**\n * Escape an argument for use in a shell command when necessary.\n * @param {String} arg\n * @return {String}\n */\nfunction escapeShellArg(arg) {\n  if (!/([\"'`\\\\$ ])/.test(arg)) {\n    return arg;\n  }\n  return '\"' + arg.replace(/([\"'`\\\\$])/g, '\\\\$1') + '\"';\n}\n\n/**\n * Escape a filename for use in a shell command.\n * @param {String} filename the filename to escape\n * @return {String} the escaped version of the filename\n */\nfunction escapeFileArg(filename) {\n  filename = filename.replace(/([\"'`\\s\\\\\\(\\)\\\\$])/g,'\\\\$1');\n  if (!/(\\\\\\\\)/.test(filename)) {\n    return filename;\n  }\n  // Under Windows rsync (with cygwin) and OpenSSH for Windows\n  // (http://www.mls-software.com/opensshd.html) are using \n  // standard linux directory separator so need to replace it\n  if ('win32' === process.platform) {\n    filename = filename.replace(/\\\\\\\\/g,'/').replace(/^[\"]?[A-Z]\\:\\//ig,'/');\n  }\n  return filename;\n}\n\n/**\n * Strip the leading dashes from a value.\n * @param {String} value\n * @return {String}\n */\nfunction stripLeadingDashes(value) {\n    if (typeof(value) === 'string') {\n        value = value.replace(/^[\\-]*/, '');\n    }\n\n    return value;\n}\n\n/**\n * Simple function for checking if a value is an Array. Will use the native\n * Array.isArray method if available.\n * @private\n * @param {Mixed} value\n * @return {Boolean}\n */\nfunction isArray(value) {\n    if (typeof(Array.isArray) === 'function') {\n        return Array.isArray(value);\n    }\n    else {\n        return toString.call(value) == '[object Array]';\n    }\n}\n\n/**\n * Simple hasOwnProperty wrapper. This will call hasOwnProperty on the obj\n * through the Object prototype.\n * @private\n * @param {Object} obj  The object to check the property on\n * @param {String} key  The name of the property to check\n * @return {Boolean}\n */\nfunction hasOP(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\n * Simple debug printer.\n *\n * @private\n * @param {Rsync} cmd\n * @param {String} message\n */\nfunction debug(cmd, message) {\n    if (!cmd._debug) return;\n}\n"}